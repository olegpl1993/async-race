{"version":3,"file":"main.72e8458ecbd8bc61f5cf.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECDZ,SAASC,EACtBC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAUC,SAASN,cAAcE,GAIvC,OAHIC,IAAWE,EAAQF,UAAYA,GAC/BC,IAASC,EAAQE,YAAcC,OAAOJ,IAC1CH,EAAOQ,OAAOJ,GACPA,CACT,CCXAN,EAAoBW,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAjB,EAAoBW,EAAEO,gBAAeD,EAAYjB,EAAoBW,EAAEQ,SAAW,IACtF,IAAIZ,EAAWP,EAAoBW,EAAEJ,SACrC,IAAKU,GAAaV,IACbA,EAASa,gBACZH,EAAYV,EAASa,cAAcC,MAC/BJ,GAAW,CACf,IAAIK,EAAUf,EAASgB,qBAAqB,UACzCD,EAAQE,SAAQP,EAAYK,EAAQA,EAAQE,OAAS,GAAGH,IAC5D,CAID,IAAKJ,EAAW,MAAM,IAAIQ,MAAM,yDAChCR,EAAYA,EAAUS,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF1B,EAAoB2B,EAAIV,C,mDCfT,SAAeW,EAAUC,G,2CAChCC,MAAM,+BAAgC,CAC1CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IAEzB,E,+RCRe,SAAeO,EAAaC,EAAYC,G,qCAErD,aADkBR,MAAM,mCAAmCO,YAAaC,IAAU,CAAEP,OAAQ,SAE9F,E,+RCHe,SAASQ,EAASC,EAAqBC,GACpD,MAAMC,EAAMF,EACNG,EAAOD,EAAIE,MAAMD,MAASD,EAAIE,MAAMD,KAAKE,MAAM,GAAI,GAAM,GAAM,EACrEH,EAAIE,MAAMD,KAAO,GAAGA,KAChBA,EAAO,IAAIG,cAAcL,EAC/B,CCLA,MAUA,EAVc,CACZM,iBAAkB,EAClBC,gBAAiB,EACjBC,iBAAkB,EAClBC,gBAAiB,GACjBC,aAAc,CAAEC,MAAO,EAAGC,KAAM,GAChCC,WAAY,GACZC,YAAa,ICPA,SAAeC,EAAQT,EAA2BU,G,qCAC/D,IAAIC,EAMJ,OAJEA,EADED,QACU3B,MAAM,sCAAsCiB,YAA2BU,WAEvE3B,MAAM,gCAEb4B,CACT,E,+RCRe,SAAeC,EAC5BC,EACAH,EACAI,EACAC,G,qCAEA,IAAIJ,EACJ,MAAMK,EAAM,CAAC,kCACTH,GAAmBG,EAAIC,KAAK,SAASJ,KACrCH,GAAOM,EAAIC,KAAK,UAAUP,KAC1BI,GAAME,EAAIC,KAAK,SAASH,KACxBC,GAAOC,EAAIC,KAAK,UAAUF,KAC9B,MAAMG,EAAWF,EAAIG,KAAK,KAO1B,OAJER,EADEE,GAAqBH,GAASI,GAAQC,QAC5BhC,MAAMmC,SAENnC,MAAM,iCAEb4B,CACT,E,+RCTe,SAAeS,EAC5BC,EACA5B,EACAY,G,qCAEA,MAAMiB,QAAkBjC,EAAagB,EAAO,WACtCkB,QAAqCD,EAAUE,OAE/CC,EAAgBF,EAAcG,SAAWH,EAAcI,SACvDjC,EAAoBkC,aAAY,IAAMpC,EAASC,EAAQC,IAAM+B,EAAgB,KAE7EI,QAAkBxC,EAAagB,EAAO,SAI5C,GAFyB,MAArBwB,EAAUtC,QAAgBQ,cAAcL,GAEnB,MAArBmC,EAAUtC,QAA+C,IAA7B,qBAAgC,CAC9D,qBAA2Bc,EAC3B,oBAA0BoB,EAC1B,MAAMK,IAAgBL,EAAgB,KAAMM,QAAQ,GAC9CC,QAAejD,MAAM,gCAAgCsB,KACrD4B,QAAyBD,EAAOR,OACtCtE,EAAcmE,EAAY,MAAO,kBAAmB,UAAUY,EAAQC,aAAaJ,MAEnF,MAAMK,QAAmBvB,IACnBwB,QAAkCD,EAAWX,OACnD,IAAIa,GAAiB,EACrBD,EAAYE,SAASC,IACfA,EAAGjD,KAAOe,ICtCL,SAA4Bf,EAAYkD,G,gDAC/CzD,MAAM,iCAAiCO,IAAM,CACjDN,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUoD,IAEzB,E,mRD+BQC,CAAapC,EAAO,CAClBqC,KAAMH,EAAGG,KAAO,EAChBpC,KAAMwB,EAAcS,EAAGjC,KAAOwB,EAAcS,EAAGjC,OAEjD+B,GAAiB,E,IAIjBA,UE/CO,SAA4BvD,G,2CACnCC,MAAM,gCAAiC,CAC3CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IAEzB,E,+RFwCY6D,CAAa,CAAErD,GAAIe,EAAOqC,KAAM,EAAGpC,OAAQmB,EAAgB,KAAMM,QAAQ,K,CAGrF,E,ykBGjCe,SAAea,EAAWvB,G,yCACvC,KAAOA,EAAWwB,YAAYxB,EAAWyB,YAAYzB,EAAWwB,YAChE,MAAME,EAAkC,GAElCC,EAAY9F,EAAcmE,EAAY,MAAO,aAG7C4B,EAAY/F,EAAc8F,EAAW,MAAO,aAC5CE,EAAehG,EAAc+F,EAAW,MAAO,UAC/CE,EAAqBjG,EAAcgG,EAAc,QAAS,aAC1DE,EAAsBlG,EAAcgG,EAAc,QAAS,cACjEE,EAAoBC,KAAO,QAENnG,EAAcgG,EAAc,SAAU,SAAU,UACxDI,iBAAiB,SAAS,IAAY,kCACjD,MAAMxE,EAAY,CAAEoD,KAAMiB,EAAmBI,MAAOC,MAAOJ,EAAoBG,aACzE1E,EAAUC,GAChB8D,EAAWvB,EACb,MAEA,MAAMoC,EAAevG,EAAc+F,EAAW,MAAO,UAC/CS,EAAqBxG,EAAcuG,EAAc,QAAS,aAC1DE,EAAsBzG,EAAcuG,EAAc,QAAS,cACjEE,EAAoBN,KAAO,QAC3B,MAAMO,EAAe1G,EAAcuG,EAAc,SAAU,SAAU,UAGrE,IAAII,EAFJD,EAAaE,UAAW,EAGxBF,EAAaN,iBAAiB,SAAS,IAAY,kCACjD,MAAMd,EAAY,CAAEN,KAAMwB,EAAmBH,MAAOC,MAAOG,EAAoBJ,aC/CpE,SAAyBjE,EAAYkD,G,2CAC5CzD,MAAM,gCAAgCO,IAAM,CAChDN,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUoD,IAEzB,E,+RDwCUuB,CAAUF,EAAgBrB,GAChCI,EAAWvB,EACb,MAEA,MAAM2C,EAAmD,GACnDC,EAAe/G,EAAc+F,EAAW,MAAO,UAG/CiB,EAAWhH,EAAc+G,EAAc,SAAU,eAAgB,SACvEC,EAASJ,UAAW,EACpBI,EAASZ,iBAAiB,SAAS,KACjCU,EAAY1B,SAAS6B,KExDV,SACb1E,EACAY,EACA+D,G,0CAEA,MAAMzE,EAAMF,EACN6B,QAAkBjC,EAAagB,EAAO,kBACViB,EAAUE,SAClCzB,mBFiDNsE,GEhDJ1E,EAAIE,MAAMD,KAAO,IACnB,E,mRF+CMyE,CAASF,EAAQG,KAAMH,EAAQ7E,GAAG,IAGpC,qBAA2B,EAC3B,oBAA0B,EAEtB+B,EAAWkD,WAAW,IAAIlD,EAAWyB,YAAYzB,EAAWkD,WAAW,IAE3E,MAAMC,EAAShH,SAASiH,iBAAiB,UACzCC,YAAW,KACTF,EAAOlC,SAASqC,IACCA,EACRb,UAAW,CAAK,IAEzBF,EAAaE,UAAW,EACxBI,EAASJ,UAAW,EACpBf,EAAWT,SAASqC,IACHA,EACRb,UAAW,CAAI,GACtB,GACD,IAAK,IAIM5G,EAAc+G,EAAc,SAAU,SAAU,QACxDX,iBAAiB,SAAS,KACjB9F,SAASiH,iBAAiB,UAClCnC,SAASqC,IACCA,EACRb,UAAW,CAAI,IAExBY,YAAW,KACTR,EAASJ,UAAW,CAAK,GACxB,MACHE,EAAY1B,SAAS6B,IACnB/C,EAAUC,EAAY8C,EAAQG,KAAMH,EAAQ7E,GAAG,GAC/C,IAIoBpC,EAAc+G,EAAc,SAAU,SAAU,iBACxDX,iBAAiB,SAAS,IAAY,kCACpD,MAAMsB,EAA8B,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAAG,CAE/B,MAAMC,EAAS,CAAC,SAAU,WAAY,MAAO,QAAS,aAAc,OAAQ,UAAW,OAAQ,SAAU,WACnGC,EAAQ,CAAC,SAAU,KAAM,KAAM,KAAM,KAAM,KAAM,WAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAC1F,IAAK,IAAK,QAAS,YAAa,UAAW,UAAW,UAAW,UAAW,WACxEC,EAAa,GAAGF,EAAOG,KAAKC,MAAMD,KAAKE,SAAWL,EAAOrG,YAAYsG,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMtG,WAE5G2G,EAAU,mBAChB,IAAIC,EAAW,IACf,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAGD,GAAYD,EAAQH,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnE,MAAMrG,EAAY,CAAEoD,KAAM8C,EAAYxB,MAAO6B,GAC7CT,EAAW3D,KAAKpC,EAAUC,G,OAEtByG,QAAQC,IAAIZ,GAClBhC,EAAWvB,EACb,MAGA,MAAMoE,QAAkBhF,IAClBiF,QAA8BD,EAAUjE,OAE9CtE,EAAc8F,EAAW,MAAO,aAAc,UAAU0C,EAAWjH,WACnEvB,EAAc8F,EAAW,MAAO,aAAc,SAAS,sBAEvD,MAAM2C,EAAWzI,EAAc8F,EAAW,MAAO,YAG3C4C,QAAwBnF,EAAQ,mBAAwB,0BACpBmF,EAAgBpE,QAEzCc,SAAS3C,IACxB,MAAMkG,EAAW3I,EAAcyI,EAAU,MAAO,YAC1CG,EAAsB5I,EAAc2I,EAAU,MAAO,uBAEzC3I,EAAc4I,EAAqB,SAAU,SAAU,UAC/DxC,iBAAiB,SAAS,KAClCI,EAAmBH,MAAQ5D,EAAIuC,KAC/B2B,EAAiBlE,EAAIL,GACrBsE,EAAaE,UAAW,CAAK,IAGb5G,EAAc4I,EAAqB,SAAU,SAAU,UAC/DxC,iBAAiB,SAAS,IAAY,kCAC9C,MAAMnB,QAAmBvB,WACeuB,EAAWX,QACvCc,SAAeC,GAAO,kCAC5BA,EAAGjD,KAAOK,EAAIL,WGtJX,SAA4BA,G,2CACnCP,MAAM,iCAAiCO,IAAM,CACjDN,OAAQ,UAEZ,E,+RHmJgB+G,CAAapG,EAAIL,IAE3B,YIzJS,SAAyBA,G,2CAChCP,MAAM,gCAAgCO,IAAM,CAChDN,OAAQ,UAEZ,E,+RJsJYgH,CAAUrG,EAAIL,IACpBsD,EAAWvB,EACb,MAEAnE,EAAc4I,EAAqB,MAAO,UAAWnG,EAAIuC,MAEzD,MAAM+D,EAAU/I,EAAc2I,EAAU,MAAO,WACzCK,EAAehJ,EAAc+I,EAAS,MAAO,gBAG7CE,EAAejJ,EAAc+I,EAAS,MAAO,gBAC7CG,EAAUlJ,EAAciJ,EAAc,MAAO,WACnDC,EAAQC,IAAM,OACdD,EAAQ9H,IAAM,EACd8H,EAAQE,MAAQ,GAChBF,EAAQG,OAAS,GACjB,MAAM9G,EAASvC,EAAciJ,EAAc,MAAO,UAClD1G,EAAO+G,UAAY,mlDAQnB/G,EAAOI,MAAM4G,KAAO9G,EAAI6D,MACxBQ,EAAY/C,KAAK,CAAEqD,KAAM7E,EAAQH,GAAIK,EAAIL,KAGzC,MAAMoH,EAAWxJ,EAAcgJ,EAAc,SAAU,SAAU,KAC3DS,EAAUzJ,EAAcgJ,EAAc,SAAU,iBAAkB,KAIxE,IAAIxG,EAHJqD,EAAW9B,KAAK0F,GAChBA,EAAQ7C,UAAW,EAGnB4C,EAASpD,iBAAiB,SAAS,IAAY,kCAC7CoD,EAAS5C,UAAW,EACpB6C,EAAQ7C,UAAW,EACnB,MAAMxC,QAAkBjC,EAAaM,EAAIL,GAAI,WACvCiC,QAAqCD,EAAUE,OAC/CC,EAAgBF,EAAcG,SAAWH,EAAcI,SAC7DjC,EAAMkC,aAAY,IAAMpC,EAASC,EAAQC,IAAM+B,EAAgB,KAEtC,aADDpC,EAAaM,EAAIL,GAAI,UAC/BC,QAAgBQ,cAAcL,EAC9C,MACAiH,EAAQrD,iBAAiB,SAAS,IAAY,kCAC5CoD,EAAS5C,UAAW,EACpB6C,EAAQ7C,UAAW,EACnB,MAAMxC,QAAkBjC,EAAaM,EAAIL,GAAI,kBACXgC,EAAUE,SAClCzB,cAAcL,GACxBD,EAAOI,MAAMD,KAAO,IACtB,MAEA1C,EAAc2I,EAAU,MAAO,YAAY,IAI7C,MAAMe,EAAc1J,EAAc8F,EAAW,MAAO,eAgBpD,OAfgB9F,EAAc0J,EAAa,SAAU,SAAU,QACvDtD,iBAAiB,SAAS,KAC5B,mBAAyB,IAC3B,oBAA0B,EAC1BV,EAAWvB,G,IAGCnE,EAAc0J,EAAa,SAAU,SAAU,QACvDtD,iBAAiB,SAAS,KAC5B,mBAAyB,kBAAwBoC,EAAWjH,SAC9D,oBAA0B,EAC1BmE,EAAWvB,G,IAIR2B,CACT,G,2SK9Ne,SAAe6D,EAAYxF,G,yCACxC,KAAOA,EAAWwB,YAAYxB,EAAWyB,YAAYzB,EAAWwB,YAEhE,MAAMV,QAAmBvB,IACnBwB,QAAkCD,EAAWX,OAE7CsF,EAAa5J,EAAcmE,EAAY,MAAO,cAEpDnE,EAAc4J,EAAY,MAAO,gBAAiB,YAAY1E,EAAY3D,WAC1EvB,EAAc4J,EAAY,MAAO,aAAc,SAAS,sBAExD,MAAMC,EAAU7J,EAAc4J,EAAY,MAAO,WAMjD,IAAIE,EACAC,EACAC,EAPJhK,EAAc6J,EAAS,MAAO,YAAa,UAC3C7J,EAAc6J,EAAS,MAAO,YAAa,OAC3C7J,EAAc6J,EAAS,MAAO,oBAAqB,QAM1B,SAArB,cAAqD,QAAtB,eACjCE,EAAkB,YAClBD,EAAc,SACdE,QAAwBtG,EACtB,mBACA,kBACA,aACA,gBAE4B,SAArB,cAAqD,SAAtB,eACxCqG,EAAkB,YAClBD,EAAc,SACdE,QAAwBtG,EACtB,mBACA,kBACA,aACA,gBAE4B,SAArB,cAAqD,QAAtB,eACxCqG,EAAkB,cAClBD,EAAc,OACdE,QAAwBtG,EACtB,mBACA,kBACA,aACA,gBAE4B,SAArB,cAAqD,SAAtB,eACxCqG,EAAkB,cAClBD,EAAc,OACdE,QAAwBtG,EACtB,mBACA,kBACA,aACA,iBAGFqG,EAAkB,YAClBD,EAAc,OACdE,QAAwBtG,EAAW,mBAAwB,oBAE7D,MAAMuG,QAAuCD,EAAgB1F,OAE7CtE,EAAc6J,EAAS,MAAO,iBAAkBC,GACxD1D,iBAAiB,SAAS,KACP,SAArB,cAAqD,QAAtB,cACjC,cAAoB,QACU,SAArB,cAAqD,SAAtB,gBAGxC,aAAmB,QAFnB,cAAoB,OAKtBuD,EAAYxF,EAAW,IAGLnE,EAAc6J,EAAS,MAAO,qBAAsBE,GAC5D3D,iBAAiB,SAAS,KACX,SAArB,cAAqD,QAAtB,cACjC,cAAoB,QACU,SAArB,cAAqD,SAAtB,gBAGxC,aAAmB,QAFnB,cAAoB,OAKtBuD,EAAYxF,EAAW,IAIzB,MAAM+F,EAAUlK,EAAc4J,EAAY,MAAO,WAEjDK,EAAiB7E,SAAQ,CAAO+E,EAAQC,IAAU,kCAChD,MAAMtF,QAAejD,MAAM,gCAAgCsI,EAAO/H,MAC5D2C,QAAyBD,EAAOR,OAChC+F,EAAarK,EAAckK,EAAS,MAAO,WACjDlK,EAAcqK,EAAY,MAAO,YAAcD,EAAQ,EAAoC,IAA9B,mBAAyB,IACtF,MAAM7H,EAASvC,EAAcqK,EAAY,MAAO,aAChD9H,EAAO+G,UAAY,mlDAQnB/G,EAAOI,MAAM4G,KAAOxE,EAAQuB,MAC5BtG,EAAcqK,EAAY,MAAO,oBAAqBtF,EAAQC,MAC9DhF,EAAcqK,EAAY,MAAO,YAAaF,EAAO3E,MACrDxF,EAAcqK,EAAY,MAAO,YAAaF,EAAO/G,KACvD,MAEA,MAAMsG,EAAc1J,EAAc4J,EAAY,MAAO,eAgBrD,OAfgB5J,EAAc0J,EAAa,SAAU,SAAU,QACvDtD,iBAAiB,SAAS,KAC5B,mBAAyB,IAC3B,oBAA0B,EAC1BuD,EAAYxF,G,IAGAnE,EAAc0J,EAAa,SAAU,SAAU,QACvDtD,iBAAiB,SAAS,KAC5B,mBAAyB,kBAAwBlB,EAAY3D,SAC/D,oBAA0B,EAC1BoI,EAAYxF,G,IAITyF,CACT,G,CChIO,MAAMU,EAAUtK,EAAcM,SAAS0B,KAAM,MAAO,WAC9CuI,EAAYvK,EAAcsK,EAAS,MAAO,aAC1CnG,EAAanE,EAAcsK,EAAS,MAAO,cAC3CE,EAAYxK,EAAcsK,EAAS,MAAO,aAEhD,SAASG,IACd,MAAM,KAAEC,GAAS3J,OAAOG,SACX,KAATwJ,GAAwB,OAATA,GAA0B,aAATA,EAAqBhF,EAAWvB,GAClD,cAATuG,EAAsBf,EAAYxF,GCb9B,SAAmBA,GAEhC,KAAOA,EAAWwB,YAAYxB,EAAWyB,YAAYzB,EAAWwB,YAElD3F,EAAcmE,EAAY,MAAO,QAAS,sBAG1D,CDOOwG,CAAUxG,EACjB,CACApD,OAAOqF,iBAAiB,aAAcqE,GAEtC1J,OAAOqF,iBAAiB,QAAQ,MElBjB,SAAgBmE,GAE7B,KAAOA,EAAU5E,YAAY4E,EAAU3E,YAAY2E,EAAU5E,YAE7D,MAAMiF,EAAkB5K,EAAcuK,EAAW,MAAO,UAEjCvK,EAAc4K,EAAiB,MAAO,0BAA2B,UACzExE,iBAAiB,SAAS,KAAQrF,OAAOG,SAASwJ,KAAO,UAAU,IAE1D1K,EAAc4K,EAAiB,MAAO,2BAA4B,WAC1ExE,iBAAiB,SAAS,KAAQrF,OAAOG,SAASwJ,KAAO,WAAW,GAGtF,CFMEG,CAAON,GGnBM,SAAgBC,GAE7B,KAAOA,EAAU7E,YAAY6E,EAAU5E,YAAY4E,EAAU7E,YAE7D,MAAMmF,EAAkB9K,EAAcwK,EAAW,MAAO,UACxDxK,EAAc8K,EAAiB,MAAO,aAAc,kBAGtD,CHYEC,CAAOP,GACPC,GAAQ,G","sources":["webpack://async-race/webpack/bootstrap","webpack://async-race/./src/modules/createElement.ts","webpack://async-race/webpack/runtime/global","webpack://async-race/webpack/runtime/publicPath","webpack://async-race/./src/modules/function/createCar.ts","webpack://async-race/./src/modules/function/startStopCar.ts","webpack://async-race/./src/modules/function/carAnime.ts","webpack://async-race/./src/modules/state.ts","webpack://async-race/./src/modules/function/getCars.ts","webpack://async-race/./src/modules/function/getWinners.ts","webpack://async-race/./src/modules/function/startRace.ts","webpack://async-race/./src/modules/function/updateWinner.ts","webpack://async-race/./src/modules/function/createWinner.ts","webpack://async-race/./src/modules/garage/garage.ts","webpack://async-race/./src/modules/function/updateCar.ts","webpack://async-race/./src/modules/function/resetCar.ts","webpack://async-race/./src/modules/function/deleteWinner.ts","webpack://async-race/./src/modules/function/deleteCar.ts","webpack://async-race/./src/modules/winners/winners.ts","webpack://async-race/./src/index.ts","webpack://async-race/./src/modules/error/error.ts","webpack://async-race/./src/modules/header/header.ts","webpack://async-race/./src/modules/footer/footer.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export default function createElement(\r\n  parent: HTMLElement | Element,\r\n  tag: string,\r\n  className?: string,\r\n  content?: string | number | HTMLElement,\r\n) {\r\n  const element = document.createElement(tag);\r\n  if (className) element.className = className;\r\n  if (content) element.textContent = String(content);\r\n  parent.append(element);\r\n  return element;\r\n}\r\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export default async function createCar(createObj: { name: string, color: string }) {\r\n  await fetch('http://127.0.0.1:3000/garage', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(createObj),\r\n  });\r\n}\r\n","export default async function startStopCar(id: number, status: string) {\r\n  const res = await fetch(`http://127.0.0.1:3000/engine?id=${id}&status=${status}`, { method: 'PATCH' });\r\n  return res;\r\n}\r\n","export default function carAnime(carBox: HTMLElement, int: NodeJS.Timer) {\r\n  const car = carBox;\r\n  const left = car.style.left ? +(car.style.left.slice(0, -1)) + 0.1 : 0;\r\n  car.style.left = `${left}%`;\r\n  if (left > 99) clearInterval(int); // останавливает анимацию в конце дороги\r\n}\r\n","const state = {\r\n  garagePageNumber: 1,\r\n  garageCarOnPage: 7,\r\n  winnerPageNumber: 1,\r\n  winnerCarOnPage: 10,\r\n  curentWinner: { carId: 0, time: 0 },\r\n  winnerSort: '',\r\n  winnerOrder: '',\r\n};\r\n\r\nexport default state;\r\n","export default async function getCars(garagePageNumber?: number, limit?: number) {\r\n  let res: Response;\r\n  if (limit) { // машины на выбранной странице\r\n    res = await fetch(`http://127.0.0.1:3000/garage?_page=${garagePageNumber}&_limit=${limit}`);\r\n  } else { // все машины в гараже\r\n    res = await fetch('http://127.0.0.1:3000/garage');\r\n  }\r\n  return res;\r\n}\r\n","export default async function getWinners(\r\n  winnersPageNumber?: number,\r\n  limit?: number,\r\n  sort?: 'id' | 'wins' | 'time',\r\n  order?: 'ASC' | 'DESC',\r\n) {\r\n  let res: Response;\r\n  const url = ['http://127.0.0.1:3000/winners?'];\r\n  if (winnersPageNumber) url.push(`_page=${winnersPageNumber}`);\r\n  if (limit) url.push(`_limit=${limit}`);\r\n  if (sort) url.push(`_sort=${sort}`);\r\n  if (order) url.push(`_order=${order}`);\r\n  const finalUrl = url.join('&');\r\n\r\n  if (winnersPageNumber || limit || sort || order) {\r\n    res = await fetch(finalUrl);\r\n  } else { // все машины победители\r\n    res = await fetch('http://127.0.0.1:3000/winners');\r\n  }\r\n  return res;\r\n}\r\n","import startStopCar from './startStopCar';\r\nimport { StartStopData } from '../types/startStopData';\r\nimport carAnime from './carAnime';\r\nimport state from '../state';\r\nimport createElement from '../createElement';\r\nimport { CarData } from '../types/carData';\r\nimport createWinner from './createWinner';\r\nimport getWinners from './getWinners';\r\nimport { WinnerData } from '../types/winnerData';\r\nimport updateWinner from './updateWinner';\r\n\r\nexport default async function startRace(\r\n  contentBox: HTMLElement,\r\n  carBox: HTMLElement,\r\n  carId: number,\r\n) {\r\n  const startStop = await startStopCar(carId, 'started');\r\n  const startStopData: StartStopData = await startStop.json();\r\n\r\n  const timeAnimation = startStopData.distance / startStopData.velocity;\r\n  const int: NodeJS.Timer = setInterval(() => carAnime(carBox, int), timeAnimation / 1000);\r\n\r\n  const driveMode = await startStopCar(carId, 'drive');\r\n\r\n  if (driveMode.status === 500) clearInterval(int); // останавливает машину если 500 ошибка\r\n\r\n  if (driveMode.status === 200 && state.curentWinner.carId === 0) { // записывает победителя в стейт\r\n    state.curentWinner.carId = carId;\r\n    state.curentWinner.time = timeAnimation;\r\n    const timeInTable = +(timeAnimation / 1000).toFixed(2);\r\n    const carRes = await fetch(`http://127.0.0.1:3000/garage/${carId}`);\r\n    const carData: CarData = await carRes.json(); // данные машины победителя\r\n    createElement(contentBox, 'div', 'winnerCarWindow', `Winner ${carData.name} time ${timeInTable}s`);\r\n\r\n    const winnersRes = await getWinners();\r\n    const winnersData: WinnerData[] = await winnersRes.json(); // общий массив победителей\r\n    let creatingWinner = true; // для проверки нужно создавать нового победитля или нет\r\n    winnersData.forEach((el) => {\r\n      if (el.id === carId) { // если машина уже существует в списке победителей\r\n        updateWinner(carId, { // обновляет количество побед и время\r\n          wins: el.wins + 1,\r\n          time: timeInTable < el.time ? timeInTable : el.time,\r\n        });\r\n        creatingWinner = false;\r\n      }\r\n    });\r\n    // добавляет победителя если его нету в списке победителией\r\n    if (creatingWinner) {\r\n      await createWinner({ id: carId, wins: 1, time: +(timeAnimation / 1000).toFixed(2) });\r\n    }\r\n  }\r\n}\r\n","export default async function updateWinner(id: number, updateObj: { wins: number, time: number }) {\r\n  await fetch(`http://127.0.0.1:3000/winners/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(updateObj),\r\n  });\r\n}\r\n","export default async function createWinner(createObj: { id: number, wins: number, time: number }) {\r\n  await fetch('http://127.0.0.1:3000/winners', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(createObj),\r\n  });\r\n}\r\n","import './garage.scss';\r\nimport createElement from '../createElement';\r\nimport { CarData } from '../types/carData';\r\nimport flagImg from '../../images/flag.png';\r\nimport createCar from '../function/createCar';\r\nimport updateCar from '../function/updateCar';\r\nimport deleteCar from '../function/deleteCar';\r\nimport startStopCar from '../function/startStopCar';\r\nimport { StartStopData } from '../types/startStopData';\r\nimport carAnime from '../function/carAnime';\r\nimport state from '../state';\r\nimport getCars from '../function/getCars';\r\nimport startRace from '../function/startRace';\r\nimport resetCar from '../function/resetCar';\r\nimport deleteWinner from '../function/deleteWinner';\r\nimport getWinners from '../function/getWinners';\r\nimport { WinnerData } from '../types/winnerData';\r\n\r\nexport default async function garagePage(contentBox: HTMLElement) {\r\n  while (contentBox.firstChild) contentBox.removeChild(contentBox.firstChild);\r\n  const stopBtnArr: HTMLButtonElement[] = []; // массив кнопок остановки машины\r\n\r\n  const garageBox = createElement(contentBox, 'div', 'garageBox');\r\n\r\n  // панель создания и изменения машин -------------------------------------------------------\r\n  const driverBox = createElement(garageBox, 'div', 'driverBox');\r\n  const createCarRow = createElement(driverBox, 'div', 'carRow');\r\n  const createCarNameInput = createElement(createCarRow, 'input', 'textInput') as HTMLInputElement;\r\n  const createCarColorInput = createElement(createCarRow, 'input', 'colorInput') as HTMLInputElement;\r\n  createCarColorInput.type = 'color';\r\n\r\n  const createCarBtn = createElement(createCarRow, 'button', 'button', 'CREATE') as HTMLButtonElement;\r\n  createCarBtn.addEventListener('click', async () => {\r\n    const createObj = { name: createCarNameInput.value, color: createCarColorInput.value };\r\n    await createCar(createObj);\r\n    garagePage(contentBox);\r\n  });\r\n\r\n  const updateCarRow = createElement(driverBox, 'div', 'carRow');\r\n  const updateCarNameInput = createElement(updateCarRow, 'input', 'textInput') as HTMLInputElement;\r\n  const updateCarColorInput = createElement(updateCarRow, 'input', 'colorInput') as HTMLInputElement;\r\n  updateCarColorInput.type = 'color';\r\n  const updateCarBtn = createElement(updateCarRow, 'button', 'button', 'UPDATE') as HTMLButtonElement;\r\n  updateCarBtn.disabled = true;\r\n\r\n  let updateCarIndex: number;\r\n  updateCarBtn.addEventListener('click', async () => {\r\n    const updateObj = { name: updateCarNameInput.value, color: updateCarColorInput.value };\r\n    await updateCar(updateCarIndex, updateObj);\r\n    garagePage(contentBox);\r\n  });\r\n\r\n  const carArrNodes: { node: HTMLElement, id: number }[] = []; // массив машин для гонки startRace\r\n  const buttonCarRow = createElement(driverBox, 'div', 'carRow');\r\n\r\n  // кнопка сброса гонки -----------------------------------------------------------------\r\n  const resetBtn = createElement(buttonCarRow, 'button', 'button reset', 'RESET') as HTMLButtonElement;\r\n  resetBtn.disabled = true;\r\n  resetBtn.addEventListener('click', () => {\r\n    carArrNodes.forEach((carNode) => { // остановка всех машин\r\n      resetCar(carNode.node, carNode.id); // останавливает и возвращает машину\r\n    });\r\n    // сброс данных о текущем победителе\r\n    state.curentWinner.carId = 0;\r\n    state.curentWinner.time = 0;\r\n    // удаление окна победителя\r\n    if (contentBox.childNodes[1]) contentBox.removeChild(contentBox.childNodes[1]);\r\n    // включает все кнопки на странице\r\n    const btnArr = document.querySelectorAll('button'); // массив всех кнопок на странице\r\n    setTimeout(() => {\r\n      btnArr.forEach((btn) => {\r\n        const button = btn;\r\n        button.disabled = false;\r\n      });\r\n      updateCarBtn.disabled = true;\r\n      resetBtn.disabled = true;\r\n      stopBtnArr.forEach((btn) => {\r\n        const button = btn;\r\n        button.disabled = true;\r\n      });\r\n    }, 2000);\r\n  });\r\n\r\n  // кнопка начала гонки ------------------------------------------------------------------\r\n  const raceBtn = createElement(buttonCarRow, 'button', 'button', 'RACE') as HTMLButtonElement;\r\n  raceBtn.addEventListener('click', () => {\r\n    const btnArr = document.querySelectorAll('button'); // массив всех кнопок на странице\r\n    btnArr.forEach((btn) => { // отключает все кнопки на странице\r\n      const button = btn;\r\n      button.disabled = true;\r\n    });\r\n    setTimeout(() => {\r\n      resetBtn.disabled = false;\r\n    }, 12000);\r\n    carArrNodes.forEach((carNode) => { // запуск всех машин на странице\r\n      startRace(contentBox, carNode.node, carNode.id); // запуск одной машины\r\n    });\r\n  });\r\n\r\n  // кнопка генерации машин --------------------------------------------------------\r\n  const generateCarsBtn = createElement(buttonCarRow, 'button', 'button', 'GENERATE CARS') as HTMLButtonElement;\r\n  generateCarsBtn.addEventListener('click', async () => {\r\n    const promiseArr: Promise<void>[] = [];\r\n    for (let n = 0; n < 100; n += 1) {\r\n      // случайное имя из двух массивов\r\n      const brands = ['Toyota', 'Mercedes', 'BMW', 'Honda', 'Volkswagen', 'Ford', 'Hyundai', 'Audi', 'Nissan', 'Porsche'];\r\n      const model = ['Martin', 'X5', 'X6', 'X7', 'X8', 'X9', 'Roadster', '2', '3', '4', '5', '6', '7',\r\n        '8', '9', 'Sedan', 'Hatchback', 'D-Class', 'C-Class', 'B-Class', 'A-Class', 'S-Class'];\r\n      const rndCarName = `${brands[Math.floor(Math.random() * brands.length)]} ${model[Math.floor(Math.random() * model.length)]}`;\r\n      // случайный цвет в формате rgb\r\n      const letters = '0123456789ABCDEF';\r\n      let rndColor = '#';\r\n      for (let i = 0; i < 6; i += 1) rndColor += letters[Math.floor(Math.random() * 16)];\r\n      // добавление машины\r\n      const createObj = { name: rndCarName, color: rndColor };\r\n      promiseArr.push(createCar(createObj));\r\n    }\r\n    await Promise.all(promiseArr);\r\n    garagePage(contentBox); // обновление страницы\r\n  });\r\n\r\n  // количество машин в гараже и номер страницы -------------------------------------\r\n  const garageRes = await getCars();\r\n  const garageData: CarData[] = await garageRes.json(); // массив машин в гараже\r\n\r\n  createElement(garageBox, 'div', 'numberCars', `Garge (${garageData.length})`);\r\n  createElement(garageBox, 'div', 'numberPage', `Page #${state.garagePageNumber}`);\r\n\r\n  const trackBox = createElement(garageBox, 'div', 'trackBox');\r\n\r\n  // игровое поле с треками и машинами ------------------------------------------------\r\n  const garageResOnPage = await getCars(state.garagePageNumber, state.garageCarOnPage);\r\n  const garageDataOnPage: CarData[] = await garageResOnPage.json(); // массив машин текущей страницы\r\n\r\n  garageDataOnPage.forEach((car) => {\r\n    const trackRow = createElement(trackBox, 'div', 'trackRow');\r\n    const selectRemoveNameRow = createElement(trackRow, 'div', 'selectRemoveNameRow');\r\n\r\n    const selectBtn = createElement(selectRemoveNameRow, 'button', 'button', 'SELECT') as HTMLButtonElement;\r\n    selectBtn.addEventListener('click', () => {\r\n      updateCarNameInput.value = car.name;\r\n      updateCarIndex = car.id; // меняет id выбраного авто\r\n      updateCarBtn.disabled = false; // делает активной кнопку обновить\r\n    });\r\n\r\n    const removeBtn = createElement(selectRemoveNameRow, 'button', 'button', 'REMOVE') as HTMLButtonElement;\r\n    removeBtn.addEventListener('click', async () => {\r\n      const winnersRes = await getWinners();\r\n      const winnersData: WinnerData[] = await winnersRes.json(); // общий массив победителей\r\n      winnersData.forEach(async (el) => {\r\n        if (el.id === car.id) { // если машина уже существует в списке победителей\r\n          await deleteWinner(car.id); // удаляет из списка победителей\r\n        }\r\n      });\r\n      await deleteCar(car.id); // удаляет из гаража\r\n      garagePage(contentBox);\r\n    });\r\n\r\n    createElement(selectRemoveNameRow, 'div', 'carName', car.name);\r\n\r\n    const mainRow = createElement(trackRow, 'div', 'mainRow');\r\n    const startStopRow = createElement(mainRow, 'div', 'startStopRow');\r\n\r\n    // трек и машина --------------------------------------------------------------------\r\n    const mainTrackRow = createElement(mainRow, 'div', 'mainTrackRow');\r\n    const flagBox = createElement(mainTrackRow, 'img', 'flagBox') as HTMLImageElement;\r\n    flagBox.alt = 'flag';\r\n    flagBox.src = flagImg;\r\n    flagBox.width = 60;\r\n    flagBox.height = 60;\r\n    const carBox = createElement(mainTrackRow, 'div', 'carBox');\r\n    carBox.innerHTML = `<svg width=\"80\" height=\"50\" class=\"carSVG\" viewBox=\"40 -55 180 180\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g><title>background</title><rect fill=\"none\" id=\"canvas_background\" height=\"131\" width=\"258\" y=\"-1\" x=\"-1\"/></g>\r\n    <g><title>Layer 1</title>\r\n    <g id=\"svg_1\" stroke=\" none\" transform=\"translate(1.4065934419631958,1.4065934419631958) scale(2.809999942779541) \">\r\n    <circle id=\"svg_2\" stroke=\" none\" r=\"1.955\" cy=\"34.015458\" cx=\"71.090872\"/>\r\n    <circle id=\"svg_3\" stroke=\" none\" r=\"1.955\" cy=\"34.015458\" cx=\"20.120872\"/>\r\n    <path id=\"svg_4\" stroke=\" none\" stroke-linecap=\"round\" d=\"m75.834872,13.285458l-7.987,-1.22l-2.35,-2.574c-5.599,-6.132 -13.571,-9.649 -21.874,-9.649l-6.245,0c-1.357,0 -2.696,0.107 -4.016,0.296c-0.022,0.004 -0.044,0.006 -0.066,0.01c-7.799,1.133 -14.802,5.468 -19.285,12.106c-7.95,2.899 -13.656,10.344 -13.656,17.938c0,3.254 2.647,5.9 5.9,5.9l3.451,0c0.969,4.866 5.269,8.545 10.416,8.545s9.447,-3.679 10.416,-8.545l30.139,0c0.969,4.866 5.27,8.545 10.416,8.545s9.446,-3.679 10.415,-8.545l2.947,0c3.254,0 5.9,-2.646 5.9,-5.9c0,-8.511 -6.106,-15.621 -14.521,-16.907zm-32.21,-9.443c7.065,0 13.848,2.949 18.676,8.094l-22.481,0l-3.267,-8.068c0.275,-0.009 0.55,-0.026 0.826,-0.026l6.246,0zm-11.189,0.516l3.068,7.578l-16.176,0c3.457,-3.883 8.046,-6.527 13.108,-7.578zm-12.313,36.279c-3.652,0 -6.623,-2.971 -6.623,-6.622c0,-3.652 2.971,-6.623 6.623,-6.623s6.623,2.971 6.623,6.623c0,3.652 -2.971,6.622 -6.623,6.622zm50.971,0c-3.652,0 -6.623,-2.971 -6.623,-6.622c0,-3.652 2.971,-6.623 6.623,-6.623c3.651,0 6.622,2.971 6.622,6.623c0,3.652 -2.97,6.622 -6.622,6.622z\"/>\r\n    </g></g></svg>`;\r\n    carBox.style.fill = car.color;\r\n    carArrNodes.push({ node: carBox, id: car.id });\r\n\r\n    // кнопки запуска и остановки машины ----------------------------------------------------\r\n    const startBtn = createElement(startStopRow, 'button', 'button', 'A') as HTMLButtonElement;\r\n    const stopBtn = createElement(startStopRow, 'button', 'button stopBtn', 'B') as HTMLButtonElement;\r\n    stopBtnArr.push(stopBtn);\r\n    stopBtn.disabled = true;\r\n\r\n    let int: NodeJS.Timer;\r\n    startBtn.addEventListener('click', async () => {\r\n      startBtn.disabled = true;\r\n      stopBtn.disabled = false;\r\n      const startStop = await startStopCar(car.id, 'started');\r\n      const startStopData: StartStopData = await startStop.json();\r\n      const timeAnimation = startStopData.distance / startStopData.velocity;\r\n      int = setInterval(() => carAnime(carBox, int), timeAnimation / 1000);\r\n      const driveMode = await startStopCar(car.id, 'drive');\r\n      if (driveMode.status === 500) clearInterval(int);\r\n    });\r\n    stopBtn.addEventListener('click', async () => {\r\n      startBtn.disabled = false;\r\n      stopBtn.disabled = true;\r\n      const startStop = await startStopCar(car.id, 'stopped');\r\n      const data: StartStopData = await startStop.json();\r\n      if (data) clearInterval(int);\r\n      carBox.style.left = '0%';\r\n    });\r\n\r\n    createElement(trackRow, 'div', 'dottedRow');\r\n  });\r\n\r\n  // кнопки переключения страницы ----------------------------------------------------\r\n  const prevNextRow = createElement(garageBox, 'div', 'prevNextRow');\r\n  const prevBtn = createElement(prevNextRow, 'button', 'button', 'PREV') as HTMLButtonElement;\r\n  prevBtn.addEventListener('click', () => {\r\n    if (state.garagePageNumber > 1) {\r\n      state.garagePageNumber -= 1;\r\n      garagePage(contentBox);\r\n    }\r\n  });\r\n  const nextBtn = createElement(prevNextRow, 'button', 'button', 'NEXT') as HTMLButtonElement;\r\n  nextBtn.addEventListener('click', () => {\r\n    if (state.garagePageNumber * state.garageCarOnPage < garageData.length) {\r\n      state.garagePageNumber += 1;\r\n      garagePage(contentBox);\r\n    }\r\n  });\r\n\r\n  return garageBox;\r\n}\r\n","export default async function updateCar(id: number, updateObj: { name: string, color: string }) {\r\n  await fetch(`http://127.0.0.1:3000/garage/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(updateObj),\r\n  });\r\n}\r\n","import startStopCar from './startStopCar';\r\nimport { StartStopData } from '../types/startStopData';\r\n\r\nexport default async function resetCar(\r\n  carBox: HTMLElement,\r\n  carId: number,\r\n  interval?: NodeJS.Timer,\r\n) {\r\n  const car = carBox;\r\n  const startStop = await startStopCar(carId, 'stopped');\r\n  const data: StartStopData = await startStop.json();\r\n  if (data) clearInterval(interval);\r\n  car.style.left = '0%';\r\n}\r\n","export default async function deleteWinner(id: number) {\r\n  await fetch(`http://127.0.0.1:3000/winners/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n}\r\n","export default async function deleteCar(id: number) {\r\n  await fetch(`http://127.0.0.1:3000/garage/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n}\r\n","import './winners.scss';\r\nimport createElement from '../createElement';\r\nimport { WinnerData } from '../types/winnerData';\r\nimport { CarData } from '../types/carData';\r\nimport getWinners from '../function/getWinners';\r\nimport state from '../state';\r\n\r\nexport default async function winnersPage(contentBox: HTMLElement) { // очищаем узел contentBox\r\n  while (contentBox.firstChild) contentBox.removeChild(contentBox.firstChild);\r\n\r\n  const winnersRes = await getWinners();\r\n  const winnersData: WinnerData[] = await winnersRes.json(); // общий массив победителей\r\n\r\n  const winnersBox = createElement(contentBox, 'div', 'winnersBox');\r\n\r\n  createElement(winnersBox, 'div', 'winnersNumber', `Winners (${winnersData.length})`);\r\n  createElement(winnersBox, 'div', 'numberPage', `Page #${state.winnerPageNumber}`);\r\n\r\n  const nameRow = createElement(winnersBox, 'div', 'nameRow');\r\n  createElement(nameRow, 'div', 'textBlock', 'Number');\r\n  createElement(nameRow, 'div', 'textBlock', 'Car');\r\n  createElement(nameRow, 'div', 'textBlock carName', 'Name');\r\n\r\n  // сортировка ----------------------------------------------------------------------\r\n  let winsBtnText: string;\r\n  let bestTimeBtnText: string;\r\n  let winnerResOnPage: Response;\r\n  if (state.winnerSort === 'wins' && state.winnerOrder === 'ASC') {\r\n    bestTimeBtnText = 'Best time';\r\n    winsBtnText = 'Wins ↑';\r\n    winnerResOnPage = await getWinners(\r\n      state.winnerPageNumber,\r\n      state.winnerCarOnPage,\r\n      state.winnerSort,\r\n      state.winnerOrder,\r\n    );\r\n  } else if (state.winnerSort === 'wins' && state.winnerOrder === 'DESC') {\r\n    bestTimeBtnText = 'Best time';\r\n    winsBtnText = 'Wins ↓';\r\n    winnerResOnPage = await getWinners(\r\n      state.winnerPageNumber,\r\n      state.winnerCarOnPage,\r\n      state.winnerSort,\r\n      state.winnerOrder,\r\n    );\r\n  } else if (state.winnerSort === 'time' && state.winnerOrder === 'ASC') {\r\n    bestTimeBtnText = 'Best time ↑';\r\n    winsBtnText = 'Wins';\r\n    winnerResOnPage = await getWinners(\r\n      state.winnerPageNumber,\r\n      state.winnerCarOnPage,\r\n      state.winnerSort,\r\n      state.winnerOrder,\r\n    );\r\n  } else if (state.winnerSort === 'time' && state.winnerOrder === 'DESC') {\r\n    bestTimeBtnText = 'Best time ↓';\r\n    winsBtnText = 'Wins';\r\n    winnerResOnPage = await getWinners(\r\n      state.winnerPageNumber,\r\n      state.winnerCarOnPage,\r\n      state.winnerSort,\r\n      state.winnerOrder,\r\n    );\r\n  } else {\r\n    bestTimeBtnText = 'Best time';\r\n    winsBtnText = 'Wins';\r\n    winnerResOnPage = await getWinners(state.winnerPageNumber, state.winnerCarOnPage);\r\n  }\r\n  const winnerDataOnPage: WinnerData[] = await winnerResOnPage.json(); // массив текущей страницы\r\n\r\n  const winsBtn = createElement(nameRow, 'div', 'textBlock wins', winsBtnText);\r\n  winsBtn.addEventListener('click', () => {\r\n    if (state.winnerSort === 'wins' && state.winnerOrder === 'ASC') {\r\n      state.winnerOrder = 'DESC';\r\n    } else if (state.winnerSort === 'wins' && state.winnerOrder === 'DESC') {\r\n      state.winnerOrder = 'ASC';\r\n    } else {\r\n      state.winnerSort = 'wins';\r\n      state.winnerOrder = 'ASC';\r\n    }\r\n    winnersPage(contentBox);\r\n  });\r\n\r\n  const bestTimeBtn = createElement(nameRow, 'div', 'textBlock bestTime', bestTimeBtnText);\r\n  bestTimeBtn.addEventListener('click', () => {\r\n    if (state.winnerSort === 'time' && state.winnerOrder === 'ASC') {\r\n      state.winnerOrder = 'DESC';\r\n    } else if (state.winnerSort === 'time' && state.winnerOrder === 'DESC') {\r\n      state.winnerOrder = 'ASC';\r\n    } else {\r\n      state.winnerSort = 'time';\r\n      state.winnerOrder = 'ASC';\r\n    }\r\n    winnersPage(contentBox);\r\n  });\r\n  // -------------------------------------------------------------------------------------\r\n\r\n  const lineBox = createElement(winnersBox, 'div', 'lineBox');\r\n\r\n  winnerDataOnPage.forEach(async (winner, index) => {\r\n    const carRes = await fetch(`http://127.0.0.1:3000/garage/${winner.id}`);\r\n    const carData: CarData = await carRes.json(); // данные машины победителя\r\n    const winnerLine = createElement(lineBox, 'div', 'nameRow');\r\n    createElement(winnerLine, 'div', 'textBlock', (index + 1) + (state.winnerPageNumber - 1) * 10); // номер в списке\r\n    const carBox = createElement(winnerLine, 'div', 'textBlock');\r\n    carBox.innerHTML = `<svg width=\"90\" height=\"40\" class=\"carSVG\" viewBox=\"40 -20 180 180\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g><title>background</title><rect fill=\"none\" id=\"canvas_background\" height=\"131\" width=\"258\" y=\"-1\" x=\"-1\"/></g>\r\n    <g><title>Layer 1</title>\r\n    <g id=\"svg_1\" stroke=\" none\" transform=\"translate(1.4065934419631958,1.4065934419631958) scale(2.809999942779541) \">\r\n    <circle id=\"svg_2\" stroke=\" none\" r=\"1.955\" cy=\"34.015458\" cx=\"71.090872\"/>\r\n    <circle id=\"svg_3\" stroke=\" none\" r=\"1.955\" cy=\"34.015458\" cx=\"20.120872\"/>\r\n    <path id=\"svg_4\" stroke=\" none\" stroke-linecap=\"round\" d=\"m75.834872,13.285458l-7.987,-1.22l-2.35,-2.574c-5.599,-6.132 -13.571,-9.649 -21.874,-9.649l-6.245,0c-1.357,0 -2.696,0.107 -4.016,0.296c-0.022,0.004 -0.044,0.006 -0.066,0.01c-7.799,1.133 -14.802,5.468 -19.285,12.106c-7.95,2.899 -13.656,10.344 -13.656,17.938c0,3.254 2.647,5.9 5.9,5.9l3.451,0c0.969,4.866 5.269,8.545 10.416,8.545s9.447,-3.679 10.416,-8.545l30.139,0c0.969,4.866 5.27,8.545 10.416,8.545s9.446,-3.679 10.415,-8.545l2.947,0c3.254,0 5.9,-2.646 5.9,-5.9c0,-8.511 -6.106,-15.621 -14.521,-16.907zm-32.21,-9.443c7.065,0 13.848,2.949 18.676,8.094l-22.481,0l-3.267,-8.068c0.275,-0.009 0.55,-0.026 0.826,-0.026l6.246,0zm-11.189,0.516l3.068,7.578l-16.176,0c3.457,-3.883 8.046,-6.527 13.108,-7.578zm-12.313,36.279c-3.652,0 -6.623,-2.971 -6.623,-6.622c0,-3.652 2.971,-6.623 6.623,-6.623s6.623,2.971 6.623,6.623c0,3.652 -2.971,6.622 -6.623,6.622zm50.971,0c-3.652,0 -6.623,-2.971 -6.623,-6.622c0,-3.652 2.971,-6.623 6.623,-6.623c3.651,0 6.622,2.971 6.622,6.623c0,3.652 -2.97,6.622 -6.622,6.622z\"/>\r\n    </g></g></svg>`;\r\n    carBox.style.fill = carData.color;\r\n    createElement(winnerLine, 'div', 'textBlock carName', carData.name); // название машины\r\n    createElement(winnerLine, 'div', 'textBlock', winner.wins); // количество побед\r\n    createElement(winnerLine, 'div', 'textBlock', winner.time); // лучшее время\r\n  });\r\n\r\n  const prevNextRow = createElement(winnersBox, 'div', 'prevNextRow');\r\n  const prevBtn = createElement(prevNextRow, 'button', 'button', 'PREV') as HTMLButtonElement;\r\n  prevBtn.addEventListener('click', () => {\r\n    if (state.winnerPageNumber > 1) {\r\n      state.winnerPageNumber -= 1;\r\n      winnersPage(contentBox);\r\n    }\r\n  });\r\n  const nextBtn = createElement(prevNextRow, 'button', 'button', 'NEXT') as HTMLButtonElement;\r\n  nextBtn.addEventListener('click', () => {\r\n    if (state.winnerPageNumber * state.winnerCarOnPage < winnersData.length) {\r\n      state.winnerPageNumber += 1;\r\n      winnersPage(contentBox);\r\n    }\r\n  });\r\n\r\n  return winnersBox;\r\n}\r\n","import './index.scss';\r\nimport createElement from './modules/createElement';\r\nimport garagePage from './modules/garage/garage';\r\nimport winnersPage from './modules/winners/winners';\r\nimport errorPage from './modules/error/error';\r\nimport header from './modules/header/header';\r\nimport footer from './modules/footer/footer';\r\n\r\nexport const wrapper = createElement(document.body, 'div', 'wrapper');\r\nexport const headerBox = createElement(wrapper, 'div', 'headerBox');\r\nexport const contentBox = createElement(wrapper, 'div', 'contentBox');\r\nexport const footerBox = createElement(wrapper, 'div', 'footerBox');\r\n\r\nexport function router() {\r\n  const { hash } = window.location; // получает хеш из строки браузера\r\n  if (hash === '' || hash === '#/' || hash === '#/garage') garagePage(contentBox); // рендеринг страницы\r\n  else if (hash === '#/winners') winnersPage(contentBox);\r\n  else errorPage(contentBox);\r\n}\r\nwindow.addEventListener('hashchange', router); // срабатывает на изменение хеша в строке url\r\n\r\nwindow.addEventListener('load', () => {\r\n  header(headerBox);\r\n  footer(footerBox);\r\n  router();\r\n});\r\n","import './error.scss';\r\nimport createElement from '../createElement';\r\n\r\nexport default function errorPage(contentBox: HTMLElement) {\r\n  // очищаем узел contentBox\r\n  while (contentBox.firstChild) contentBox.removeChild(contentBox.firstChild);\r\n\r\n  const error = createElement(contentBox, 'div', 'error', '404: page not found');\r\n\r\n  return error;\r\n}\r\n","import './header.scss';\r\nimport createElement from '../createElement';\r\n\r\nexport default function header(headerBox: HTMLElement) {\r\n  // очищаем узел headerBox\r\n  while (headerBox.firstChild) headerBox.removeChild(headerBox.firstChild);\r\n\r\n  const headerContainer = createElement(headerBox, 'div', 'header');\r\n\r\n  const garagePageLink = createElement(headerContainer, 'div', 'garagePageLink menuLink', 'garage');\r\n  garagePageLink.addEventListener('click', () => { window.location.hash = '#/garage'; });\r\n\r\n  const winnersPageLink = createElement(headerContainer, 'div', 'winnersPageLink menuLink', 'winners');\r\n  winnersPageLink.addEventListener('click', () => { window.location.hash = '#/winners'; });\r\n\r\n  return headerContainer;\r\n}\r\n","import './footer.scss';\r\nimport createElement from '../createElement';\r\n\r\nexport default function footer(footerBox: HTMLElement) {\r\n  // очищаем узел footerBox\r\n  while (footerBox.firstChild) footerBox.removeChild(footerBox.firstChild);\r\n\r\n  const footerContainer = createElement(footerBox, 'div', 'footer');\r\n  createElement(footerContainer, 'div', 'footerText', 'async-race 2023');\r\n\r\n  return footerContainer;\r\n}\r\n"],"names":["__webpack_require__","createElement","parent","tag","className","content","element","document","textContent","String","append","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","createCar","createObj","fetch","method","headers","body","JSON","stringify","startStopCar","id","status","carAnime","carBox","int","car","left","style","slice","clearInterval","garagePageNumber","garageCarOnPage","winnerPageNumber","winnerCarOnPage","curentWinner","carId","time","winnerSort","winnerOrder","getCars","limit","res","getWinners","winnersPageNumber","sort","order","url","push","finalUrl","join","startRace","contentBox","startStop","startStopData","json","timeAnimation","distance","velocity","setInterval","driveMode","timeInTable","toFixed","carRes","carData","name","winnersRes","winnersData","creatingWinner","forEach","el","updateObj","updateWinner","wins","createWinner","garagePage","firstChild","removeChild","stopBtnArr","garageBox","driverBox","createCarRow","createCarNameInput","createCarColorInput","type","addEventListener","value","color","updateCarRow","updateCarNameInput","updateCarColorInput","updateCarBtn","updateCarIndex","disabled","updateCar","carArrNodes","buttonCarRow","resetBtn","carNode","interval","resetCar","node","childNodes","btnArr","querySelectorAll","setTimeout","btn","promiseArr","n","brands","model","rndCarName","Math","floor","random","letters","rndColor","i","Promise","all","garageRes","garageData","trackBox","garageResOnPage","trackRow","selectRemoveNameRow","deleteWinner","deleteCar","mainRow","startStopRow","mainTrackRow","flagBox","alt","width","height","innerHTML","fill","startBtn","stopBtn","prevNextRow","winnersPage","winnersBox","nameRow","winsBtnText","bestTimeBtnText","winnerResOnPage","winnerDataOnPage","lineBox","winner","index","winnerLine","wrapper","headerBox","footerBox","router","hash","errorPage","headerContainer","header","footerContainer","footer"],"sourceRoot":""}